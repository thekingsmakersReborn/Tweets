name: Ping and Tweet Site Status
on:
  schedule:
    #- cron: '0 */12 * * *'  # Runs every 12 hours
  workflow_dispatch:  # Allows manual trigger

jobs:
  ping-sites:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests tweepy python-dateutil

      - name: Create and Execute Script
        env:
          TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
          TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
        run: |
          cat > ping_sites_and_tweet.py << 'EOF'
          import os
          import requests
          import tweepy
          from datetime import datetime
          from dateutil import tz

          # Define the sites to ping
          sites = [
              "https://intune.microsoft.com",
              "https://portal.azure.com",
              "https://github.com",
              "https://config.office.com",
              "https://portal.azure.com",
              "https://azure.microsoft.com"
          ]

          # Set up Twitter API
          def setup_twitter():
              auth = tweepy.OAuthHandler(
                  os.getenv('TWITTER_API_KEY'),
                  os.getenv('TWITTER_API_SECRET')
              )
              auth.set_access_token(
                  os.getenv('TWITTER_ACCESS_TOKEN'),
                  os.getenv('TWITTER_ACCESS_TOKEN_SECRET')
              )
              return tweepy.API(auth)

          # Ping each site and collect the status
          def ping_sites():
              statuses = []
              for site in sites:
                  try:
                      response = requests.get(site, timeout=10)
                      if response.status_code == 200:
                          statuses.append(f"✅ {site} is UP")
                      else:
                          statuses.append(f"❌ {site} is DOWN")
                  except requests.exceptions.RequestException:
                      statuses.append(f"❌ {site} is DOWN")
              return statuses

          def main():
              api = setup_twitter()
              statuses = ping_sites()

              # Get the current time with timezone
              now = datetime.now(tz=tz.gettz('Asia/Qatar')).strftime('%Y-%m-%d %H:%M:%S %Z')

              # Construct the tweet text
              tweet_text = f"Site Status as of {now}:\n" + "\n".join(statuses)

              # Post the tweet
              api.update_status(tweet_text)

          if __name__ == "__main__":
              main()
          EOF
          
          python ping_sites_and_tweet.py

      - name: Commit updated status
        if: success()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add previous_updates.json
          git commit -m "Update previous updates record" || echo "No changes to commit"
          git push
